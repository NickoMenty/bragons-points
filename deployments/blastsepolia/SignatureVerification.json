{
  "address": "0x6c184385d100C64754F58e563aBD94246987e10b",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidSignatureError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RefereeIsUserError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SignatureAlreadyUsedError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskNumberDoesNotExistError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserAlreadyCompletedTaskError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_prize",
          "type": "uint256"
        }
      ],
      "name": "addTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "claimAllGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "claimMaxGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_task",
          "type": "uint256"
        }
      ],
      "name": "getTaskToPrize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_task",
          "type": "uint256"
        }
      ],
      "name": "getUserCompletedTasks",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserReferee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readClaimableYield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readGasParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "etherSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "etherBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        },
        {
          "internalType": "enum GasMode",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_prize",
          "type": "uint256"
        }
      ],
      "name": "setPrizeForTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_referee",
          "type": "address"
        }
      ],
      "name": "setReferee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taskCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hashedMessage",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_taskNumber",
          "type": "uint256"
        }
      ],
      "name": "verifyMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9094904e33b1196364be375081b4dd3c326ae87f6295fd9298fc2a40150face1",
  "receipt": {
    "to": null,
    "from": "0xdaaEd1F389a89da771e0516ce2d0da018A92913b",
    "contractAddress": "0x6c184385d100C64754F58e563aBD94246987e10b",
    "transactionIndex": 1,
    "gasUsed": "1469527",
    "logsBloom": "0x
    "blockHash": "0x49533e63591b07da954eb3373939498cdfb89a67c1e532a7208669c25c671775",
    "transactionHash": "0x9094904e33b1196364be375081b4dd3c326ae87f6295fd9298fc2a40150face1",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 1234849,
        "transactionHash": "0x9094904e33b1196364be375081b4dd3c326ae87f6295fd9298fc2a40150face1",
        "address": "0x6c184385d100C64754F58e563aBD94246987e10b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000daaed1f389a89da771e0516ce2d0da018a92913b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x49533e63591b07da954eb3373939498cdfb89a67c1e532a7208669c25c671775"
      }
    ],
    "blockNumber": 1234849,
    "cumulativeGasUsed": "1516460",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "76dbe04f0ab867b26a3e98f17ebfcdd4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidSignatureError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RefereeIsUserError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureAlreadyUsedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskNumberDoesNotExistError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserAlreadyCompletedTaskError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_prize\",\"type\":\"uint256\"}],\"name\":\"addTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimAllGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimMaxGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_task\",\"type\":\"uint256\"}],\"name\":\"getTaskToPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_task\",\"type\":\"uint256\"}],\"name\":\"getUserCompletedTasks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserReferee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readClaimableYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readGasParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"etherSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"etherBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"enum GasMode\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_prize\",\"type\":\"uint256\"}],\"name\":\"setPrizeForTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referee\",\"type\":\"address\"}],\"name\":\"setReferee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hashedMessage\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_taskNumber\",\"type\":\"uint256\"}],\"name\":\"verifyMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SignatureVerification.sol\":\"SignatureVerification\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/SignatureVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror OnlyOwnerError();\\nerror TaskNumberDoesNotExistError();\\nerror UserAlreadyCompletedTaskError();\\nerror InvalidSignatureError();\\nerror SignatureAlreadyUsedError();\\nerror RefereeIsUserError();\\n\\nenum YieldMode {\\n    AUTOMATIC,\\n    VOID,\\n    CLAIMABLE\\n}\\n\\nenum GasMode {\\n    VOID,\\n    CLAIMABLE \\n}\\n\\ninterface IBlast{\\n    // configure\\n    function configureContract(address contractAddress, YieldMode _yield, GasMode gasMode, address governor) external;\\n    function configure(YieldMode _yield, GasMode gasMode, address governor) external;\\n\\n    // base configuration options\\n    function configureClaimableYield() external;\\n    function configureClaimableYieldOnBehalf(address contractAddress) external;\\n    function configureAutomaticYield() external;\\n    function configureAutomaticYieldOnBehalf(address contractAddress) external;\\n    function configureVoidYield() external;\\n    function configureVoidYieldOnBehalf(address contractAddress) external;\\n    function configureClaimableGas() external;\\n    function configureClaimableGasOnBehalf(address contractAddress) external;\\n    function configureVoidGas() external;\\n    function configureVoidGasOnBehalf(address contractAddress) external;\\n    function configureGovernor(address _governor) external;\\n    function configureGovernorOnBehalf(address _newGovernor, address contractAddress) external;\\n\\n    // claim yield\\n    function claimYield(address contractAddress, address recipientOfYield, uint256 amount) external returns (uint256);\\n    function claimAllYield(address contractAddress, address recipientOfYield) external returns (uint256);\\n\\n    // claim gas\\n    function claimAllGas(address contractAddress, address recipientOfGas) external returns (uint256);\\n    function claimGasAtMinClaimRate(address contractAddress, address recipientOfGas, uint256 minClaimRateBips) external returns (uint256);\\n    function claimMaxGas(address contractAddress, address recipientOfGas) external returns (uint256);\\n    function claimGas(address contractAddress, address recipientOfGas, uint256 gasToClaim, uint256 gasSecondsToConsume) external returns (uint256);\\n\\n    // read functions\\n    function readClaimableYield(address contractAddress) external view returns (uint256);\\n    function readYieldConfiguration(address contractAddress) external view returns (uint8);\\n    function readGasParams(address contractAddress) external view returns (uint256 etherSeconds, uint256 etherBalance, uint256 lastUpdated, GasMode);\\n}\\n\\ncontract SignatureVerification is Ownable{\\n\\n    address immutable private i_owner;\\n    uint256 public taskCount;\\n    mapping(uint256 => uint256) private taskToPrize;\\n    mapping(address => mapping(uint256 => bool)) private userTaskCompleted;\\n    mapping(bytes32 => bool) private usedSignatures;\\n    mapping(address => uint256) private userPrizeBalance;\\n    mapping(address => address) private userReferee;\\n    mapping(address => bool) private userSetReferee;\\n\\n    constructor() {\\n        i_owner = msg.sender;\\n        taskCount = 0;\\n        IBlast(0x4300000000000000000000000000000000000002).configureClaimableYield();\\n        IBlast(0x4300000000000000000000000000000000000002).configureClaimableGas();\\n    }\\n\\n    function addTask(uint256 _prize) public onlyOwner {\\n        taskCount++;\\n        taskToPrize[taskCount] = _prize;\\n    }\\n\\n    function setPrizeForTask(uint256 _taskNumber, uint256 _prize) public onlyOwner {\\n        if (_taskNumber > taskCount) {\\n            revert TaskNumberDoesNotExistError();\\n        }\\n        taskToPrize[_taskNumber] = _prize;\\n    }\\n\\n    function setReferee(address _referee) public {\\n        if (_referee == msg.sender) {\\n            revert RefereeIsUserError(); \\n        }\\n        if (userSetReferee[msg.sender]) {\\n            revert RefereeIsUserError(); \\n        }\\n        userReferee[msg.sender] = _referee;\\n        userSetReferee[msg.sender] = true;\\n    }\\n\\n    function verifyMessage(bytes32 _hashedMessage, uint8 _v, bytes32 _r, bytes32 _s, uint256 _taskNumber) public {\\n        if (_taskNumber > taskCount) {\\n            revert TaskNumberDoesNotExistError();\\n        }\\n        if (userTaskCompleted[msg.sender][_taskNumber]) {\\n            revert UserAlreadyCompletedTaskError();\\n        }\\n        if (usedSignatures[_hashedMessage]) {\\n            revert SignatureAlreadyUsedError();\\n        }\\n\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n        bytes32 prefixedHashMessage = keccak256(abi.encodePacked(prefix, _hashedMessage));\\n        address recoveredSigner = ecrecover(prefixedHashMessage, _v, _r, _s);\\n\\n        if (i_owner == recoveredSigner) {\\n            userTaskCompleted[msg.sender][_taskNumber] = true;\\n\\n            uint256 prize = taskToPrize[_taskNumber];\\n            userPrizeBalance[msg.sender] += prize;\\n\\n            usedSignatures[_hashedMessage] = true;\\n\\n            address referee = userReferee[msg.sender];\\n            if (referee != address(0)) {\\n                uint256 refBonus = prize / 10;\\n                uint256 userBonus = prize / 50; \\n                userPrizeBalance[referee] += refBonus;\\n                userPrizeBalance[msg.sender] += userBonus;\\n            }\\n        } else {\\n            revert InvalidSignatureError();\\n        }\\n    }\\n\\n    /* Blast functions */\\n    function claimAllGas(address recipient) external onlyOwner{\\n\\t\\tIBlast(0x4300000000000000000000000000000000000002).claimAllGas(address(this), recipient);\\n    }\\n    function claimMaxGas(address recipient) external onlyOwner{\\n\\t\\tIBlast(0x4300000000000000000000000000000000000002).claimAllGas(address(this), recipient);\\n    }\\n\\n    /* Blast view functions */\\n    function readClaimableYield() public view returns (uint256) {\\n        return IBlast(0x4300000000000000000000000000000000000002).readClaimableYield(address(this));\\n    }\\n\\n    function readGasParams() public view returns (uint256 etherSeconds, uint256 etherBalance, uint256 lastUpdated, GasMode) {\\n        return IBlast(0x4300000000000000000000000000000000000002).readGasParams(address(this));\\n    }\\n\\n\\n    function getUserBalance(address _user) public view returns(uint256) {\\n        return userPrizeBalance[_user];\\n    }\\n\\n    function getUserReferee(address _user) public view returns (address) {\\n        return userReferee[_user];\\n    }\\n\\n    function getUserCompletedTasks(address _user, uint256 _task) public view returns (bool) {\\n        return userTaskCompleted[_user][_task];\\n    }\\n    \\n    function getTaskToPrize(uint256 _task) public view returns (uint256) {\\n        return taskToPrize[_task];\\n    }\\n}\\n\",\"keccak256\":\"0x24de452438270615f1154a22e8391ba932fad658d00a93036dbd257e34d79928\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5062000032620000266200016360201b60201c565b6200016b60201b60201c565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050600060018190555073430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663f098767a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620000ce57600080fd5b505af1158015620000e3573d6000803e3d6000fd5b5050505073430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff16634e606c476040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200014457600080fd5b505af115801562000159573d6000803e3d6000fd5b505050506200022f565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60805160601c61187e6200024e6000396000610771015261187e6000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063b911c8c811610097578063cd2002f511610066578063cd2002f514610288578063d113efc4146102a4578063d39dd684146102d4578063f2fde38b146102f257610100565b8063b911c8c814610204578063ba73cfc514610220578063c4a796c11461023c578063cad22fd91461025857610100565b8063715018a6116100d3578063715018a6146101a25780638da5cb5b146101ac5780639e291e3a146101ca578063b6cb58a5146101e657610100565b8063272b132314610105578063400d7881146101215780634773489214610151578063491ae34814610181575b600080fd5b61011f600480360381019061011a91906110c9565b61030e565b005b61013b600480360381019061013691906111b1565b6103bb565b60405161014891906114a6565b60405180910390f35b61016b600480360381019061016691906110c9565b6103d8565b60405161017891906114a6565b60405180910390f35b610189610421565b60405161019994939291906114c1565b60405180910390f35b6101aa6104d2565b005b6101b46104e6565b6040516101c191906113c2565b60405180910390f35b6101e460048036038101906101df919061120b565b61050f565b005b6101ee61056f565b6040516101fb91906114a6565b60405180910390f35b61021e60048036038101906102199190611136565b610575565b005b61023a600480360381019061023591906111b1565b610a5b565b005b610256600480360381019061025191906110c9565b610a98565b005b610272600480360381019061026d91906110f6565b610c5b565b60405161027f9190611406565b60405180910390f35b6102a2600480360381019061029d91906110c9565b610cc3565b005b6102be60048036038101906102b991906110c9565b610d70565b6040516102cb91906113c2565b60405180910390f35b6102dc610dd9565b6040516102e991906114a6565b60405180910390f35b61030c600480360381019061030791906110c9565b610e7d565b005b610316610f01565b73430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663954fa5ee30836040518363ffffffff1660e01b81526004016103659291906113dd565b602060405180830381600087803b15801561037f57600080fd5b505af1158015610393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b791906111de565b5050565b600060026000838152602001908152602001600020549050919050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060008073430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663dde798a4306040518263ffffffff1660e01b815260040161047491906113c2565b60806040518083038186803b15801561048c57600080fd5b505afa1580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c4919061124b565b935093509350935090919293565b6104da610f01565b6104e46000610f7f565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610517610f01565b600154821115610553576040517f6002761f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060026000848152602001908152602001600020819055505050565b60015481565b6001548111156105b1576040517f6002761f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060009054906101000a900460ff1615610646576040517f759136a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6004600086815260200190815260200160002060009054906101000a900460ff161561069e576040517f3f2fb4ea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152509050600081876040516020016106ed92919061139a565b60405160208183030381529060405280519060200120905060006001828888886040516000815260200160405260405161072a9493929190611421565b6020604051602081039080840390855afa15801561074c573d6000803e3d6000fd5b5050506020604051035190508073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff161415610a1f576001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060006101000a81548160ff02191690831515021790555060006002600086815260200190815260200160002054905080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461087c919061152d565b925050819055506001600460008b815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a18576000600a836109569190611583565b905060006032846109679190611583565b905081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109b8919061152d565b9250508190555080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a0e919061152d565b9250508190555050505b5050610a51565b6040517fd9681a8600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050505050565b610a63610f01565b60016000815480929190610a769061166b565b9190505550806002600060015481526020019081526020016000208190555050565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610afe576040517f9d08223000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610b82576040517f9d08223000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16905092915050565b610ccb610f01565b73430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663954fa5ee30836040518363ffffffff1660e01b8152600401610d1a9291906113dd565b602060405180830381600087803b158015610d3457600080fd5b505af1158015610d48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6c91906111de565b5050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600073430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663ec3278e8306040518263ffffffff1660e01b8152600401610e2891906113c2565b60206040518083038186803b158015610e4057600080fd5b505afa158015610e54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7891906111de565b905090565b610e85610f01565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ef5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eec90611466565b60405180910390fd5b610efe81610f7f565b50565b610f09611043565b73ffffffffffffffffffffffffffffffffffffffff16610f276104e6565b73ffffffffffffffffffffffffffffffffffffffff1614610f7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7490611486565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b60008135905061105a816117dc565b92915050565b60008135905061106f816117f3565b92915050565b6000815190506110848161180a565b92915050565b6000813590506110998161181a565b92915050565b6000815190506110ae8161181a565b92915050565b6000813590506110c381611831565b92915050565b6000602082840312156110df576110de61174b565b5b60006110ed8482850161104b565b91505092915050565b6000806040838503121561110d5761110c61174b565b5b600061111b8582860161104b565b925050602061112c8582860161108a565b9150509250929050565b600080600080600060a086880312156111525761115161174b565b5b600061116088828901611060565b9550506020611171888289016110b4565b945050604061118288828901611060565b935050606061119388828901611060565b92505060806111a48882890161108a565b9150509295509295909350565b6000602082840312156111c7576111c661174b565b5b60006111d58482850161108a565b91505092915050565b6000602082840312156111f4576111f361174b565b5b60006112028482850161109f565b91505092915050565b600080604083850312156112225761122161174b565b5b60006112308582860161108a565b92505060206112418582860161108a565b9150509250929050565b600080600080608085870312156112655761126461174b565b5b60006112738782880161109f565b94505060206112848782880161109f565b93505060406112958782880161109f565b92505060606112a687828801611075565b91505092959194509250565b6112bb816115b4565b82525050565b6112ca816115c6565b82525050565b6112d9816115d2565b82525050565b6112f06112eb826115d2565b6116b4565b82525050565b600061130182611506565b61130b8185611511565b935061131b818560208601611638565b80840191505092915050565b61133081611626565b82525050565b600061134360268361151c565b915061134e82611750565b604082019050919050565b600061136660208361151c565b91506113718261179f565b602082019050919050565b6113858161160f565b82525050565b61139481611619565b82525050565b60006113a682856112f6565b91506113b282846112df565b6020820191508190509392505050565b60006020820190506113d760008301846112b2565b92915050565b60006040820190506113f260008301856112b2565b6113ff60208301846112b2565b9392505050565b600060208201905061141b60008301846112c1565b92915050565b600060808201905061143660008301876112d0565b611443602083018661138b565b61145060408301856112d0565b61145d60608301846112d0565b95945050505050565b6000602082019050818103600083015261147f81611336565b9050919050565b6000602082019050818103600083015261149f81611359565b9050919050565b60006020820190506114bb600083018461137c565b92915050565b60006080820190506114d6600083018761137c565b6114e3602083018661137c565b6114f0604083018561137c565b6114fd6060830184611327565b95945050505050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006115388261160f565b91506115438361160f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611578576115776116be565b5b828201905092915050565b600061158e8261160f565b91506115998361160f565b9250826115a9576115a86116ed565b5b828204905092915050565b60006115bf826115ef565b9050919050565b60008115159050919050565b6000819050919050565b60008190506115ea826117c8565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000611631826115dc565b9050919050565b60005b8381101561165657808201518184015260208101905061163b565b83811115611665576000848401525b50505050565b60006116768261160f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156116a9576116a86116be565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600281106117d9576117d861171c565b5b50565b6117e5816115b4565b81146117f057600080fd5b50565b6117fc816115d2565b811461180757600080fd5b50565b6002811061181757600080fd5b50565b6118238161160f565b811461182e57600080fd5b50565b61183a81611619565b811461184557600080fd5b5056fea264697066735822122007b39eb6f693ed7bd3e12138230c5863d728ba3b748233e92e8aa76c388a82e864736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063b911c8c811610097578063cd2002f511610066578063cd2002f514610288578063d113efc4146102a4578063d39dd684146102d4578063f2fde38b146102f257610100565b8063b911c8c814610204578063ba73cfc514610220578063c4a796c11461023c578063cad22fd91461025857610100565b8063715018a6116100d3578063715018a6146101a25780638da5cb5b146101ac5780639e291e3a146101ca578063b6cb58a5146101e657610100565b8063272b132314610105578063400d7881146101215780634773489214610151578063491ae34814610181575b600080fd5b61011f600480360381019061011a91906110c9565b61030e565b005b61013b600480360381019061013691906111b1565b6103bb565b60405161014891906114a6565b60405180910390f35b61016b600480360381019061016691906110c9565b6103d8565b60405161017891906114a6565b60405180910390f35b610189610421565b60405161019994939291906114c1565b60405180910390f35b6101aa6104d2565b005b6101b46104e6565b6040516101c191906113c2565b60405180910390f35b6101e460048036038101906101df919061120b565b61050f565b005b6101ee61056f565b6040516101fb91906114a6565b60405180910390f35b61021e60048036038101906102199190611136565b610575565b005b61023a600480360381019061023591906111b1565b610a5b565b005b610256600480360381019061025191906110c9565b610a98565b005b610272600480360381019061026d91906110f6565b610c5b565b60405161027f9190611406565b60405180910390f35b6102a2600480360381019061029d91906110c9565b610cc3565b005b6102be60048036038101906102b991906110c9565b610d70565b6040516102cb91906113c2565b60405180910390f35b6102dc610dd9565b6040516102e991906114a6565b60405180910390f35b61030c600480360381019061030791906110c9565b610e7d565b005b610316610f01565b73430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663954fa5ee30836040518363ffffffff1660e01b81526004016103659291906113dd565b602060405180830381600087803b15801561037f57600080fd5b505af1158015610393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b791906111de565b5050565b600060026000838152602001908152602001600020549050919050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060008073430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663dde798a4306040518263ffffffff1660e01b815260040161047491906113c2565b60806040518083038186803b15801561048c57600080fd5b505afa1580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c4919061124b565b935093509350935090919293565b6104da610f01565b6104e46000610f7f565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610517610f01565b600154821115610553576040517f6002761f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060026000848152602001908152602001600020819055505050565b60015481565b6001548111156105b1576040517f6002761f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060009054906101000a900460ff1615610646576040517f759136a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6004600086815260200190815260200160002060009054906101000a900460ff161561069e576040517f3f2fb4ea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152509050600081876040516020016106ed92919061139a565b60405160208183030381529060405280519060200120905060006001828888886040516000815260200160405260405161072a9493929190611421565b6020604051602081039080840390855afa15801561074c573d6000803e3d6000fd5b5050506020604051035190508073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff161415610a1f576001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060006101000a81548160ff02191690831515021790555060006002600086815260200190815260200160002054905080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461087c919061152d565b925050819055506001600460008b815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a18576000600a836109569190611583565b905060006032846109679190611583565b905081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109b8919061152d565b9250508190555080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a0e919061152d565b9250508190555050505b5050610a51565b6040517fd9681a8600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050505050565b610a63610f01565b60016000815480929190610a769061166b565b9190505550806002600060015481526020019081526020016000208190555050565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610afe576040517f9d08223000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610b82576040517f9d08223000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16905092915050565b610ccb610f01565b73430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663954fa5ee30836040518363ffffffff1660e01b8152600401610d1a9291906113dd565b602060405180830381600087803b158015610d3457600080fd5b505af1158015610d48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6c91906111de565b5050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600073430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663ec3278e8306040518263ffffffff1660e01b8152600401610e2891906113c2565b60206040518083038186803b158015610e4057600080fd5b505afa158015610e54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7891906111de565b905090565b610e85610f01565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ef5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eec90611466565b60405180910390fd5b610efe81610f7f565b50565b610f09611043565b73ffffffffffffffffffffffffffffffffffffffff16610f276104e6565b73ffffffffffffffffffffffffffffffffffffffff1614610f7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7490611486565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b60008135905061105a816117dc565b92915050565b60008135905061106f816117f3565b92915050565b6000815190506110848161180a565b92915050565b6000813590506110998161181a565b92915050565b6000815190506110ae8161181a565b92915050565b6000813590506110c381611831565b92915050565b6000602082840312156110df576110de61174b565b5b60006110ed8482850161104b565b91505092915050565b6000806040838503121561110d5761110c61174b565b5b600061111b8582860161104b565b925050602061112c8582860161108a565b9150509250929050565b600080600080600060a086880312156111525761115161174b565b5b600061116088828901611060565b9550506020611171888289016110b4565b945050604061118288828901611060565b935050606061119388828901611060565b92505060806111a48882890161108a565b9150509295509295909350565b6000602082840312156111c7576111c661174b565b5b60006111d58482850161108a565b91505092915050565b6000602082840312156111f4576111f361174b565b5b60006112028482850161109f565b91505092915050565b600080604083850312156112225761122161174b565b5b60006112308582860161108a565b92505060206112418582860161108a565b9150509250929050565b600080600080608085870312156112655761126461174b565b5b60006112738782880161109f565b94505060206112848782880161109f565b93505060406112958782880161109f565b92505060606112a687828801611075565b91505092959194509250565b6112bb816115b4565b82525050565b6112ca816115c6565b82525050565b6112d9816115d2565b82525050565b6112f06112eb826115d2565b6116b4565b82525050565b600061130182611506565b61130b8185611511565b935061131b818560208601611638565b80840191505092915050565b61133081611626565b82525050565b600061134360268361151c565b915061134e82611750565b604082019050919050565b600061136660208361151c565b91506113718261179f565b602082019050919050565b6113858161160f565b82525050565b61139481611619565b82525050565b60006113a682856112f6565b91506113b282846112df565b6020820191508190509392505050565b60006020820190506113d760008301846112b2565b92915050565b60006040820190506113f260008301856112b2565b6113ff60208301846112b2565b9392505050565b600060208201905061141b60008301846112c1565b92915050565b600060808201905061143660008301876112d0565b611443602083018661138b565b61145060408301856112d0565b61145d60608301846112d0565b95945050505050565b6000602082019050818103600083015261147f81611336565b9050919050565b6000602082019050818103600083015261149f81611359565b9050919050565b60006020820190506114bb600083018461137c565b92915050565b60006080820190506114d6600083018761137c565b6114e3602083018661137c565b6114f0604083018561137c565b6114fd6060830184611327565b95945050505050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006115388261160f565b91506115438361160f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611578576115776116be565b5b828201905092915050565b600061158e8261160f565b91506115998361160f565b9250826115a9576115a86116ed565b5b828204905092915050565b60006115bf826115ef565b9050919050565b60008115159050919050565b6000819050919050565b60008190506115ea826117c8565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000611631826115dc565b9050919050565b60005b8381101561165657808201518184015260208101905061163b565b83811115611665576000848401525b50505050565b60006116768261160f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156116a9576116a86116be565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600281106117d9576117d861171c565b5b50565b6117e5816115b4565b81146117f057600080fd5b50565b6117fc816115d2565b811461180757600080fd5b50565b6002811061181757600080fd5b50565b6118238161160f565b811461182e57600080fd5b50565b61183a81611619565b811461184557600080fd5b5056fea264697066735822122007b39eb6f693ed7bd3e12138230c5863d728ba3b748233e92e8aa76c388a82e864736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/SignatureVerification.sol:SignatureVerification",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 337,
        "contract": "contracts/SignatureVerification.sol:SignatureVerification",
        "label": "taskCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 341,
        "contract": "contracts/SignatureVerification.sol:SignatureVerification",
        "label": "taskToPrize",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 347,
        "contract": "contracts/SignatureVerification.sol:SignatureVerification",
        "label": "userTaskCompleted",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 351,
        "contract": "contracts/SignatureVerification.sol:SignatureVerification",
        "label": "usedSignatures",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 355,
        "contract": "contracts/SignatureVerification.sol:SignatureVerification",
        "label": "userPrizeBalance",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 359,
        "contract": "contracts/SignatureVerification.sol:SignatureVerification",
        "label": "userReferee",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 363,
        "contract": "contracts/SignatureVerification.sol:SignatureVerification",
        "label": "userSetReferee",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}