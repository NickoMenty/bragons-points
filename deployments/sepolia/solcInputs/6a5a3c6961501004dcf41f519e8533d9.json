{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/SignatureVerification.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nerror OnlyOwnerError();\nerror TaskNumberDoesNotExistError();\nerror UserAlreadyCompletedTaskError();\nerror InvalidSignatureError();\nerror SignatureAlreadyUsedError();\nerror RefereeIsUserError();\n\ncontract SignatureVerification is Ownable{\n\n    address immutable private i_owner;\n    uint256 public taskCount;\n    mapping(uint256 => uint256) private taskToPrize;\n    mapping(address => mapping(uint256 => bool)) private userTaskCompleted;\n    mapping(bytes32 => bool) private usedSignatures;\n    mapping(address => uint256) private userPrizeBalance;\n    mapping(address => address) private userReferee;\n    mapping(address => bool) private userSetReferee;\n\n    constructor() {\n        i_owner = msg.sender;\n        taskCount = 0;\n    }\n\n    function addTask(uint256 _prize) public onlyOwner {\n        taskCount++;\n        taskToPrize[taskCount] = _prize;\n    }\n\n    function setPrizeForTask(uint256 _taskNumber, uint256 _prize) public onlyOwner {\n        if (_taskNumber > taskCount) {\n            revert TaskNumberDoesNotExistError();\n        }\n        taskToPrize[_taskNumber] = _prize;\n    }\n\n    function setReferee(address _referee) public {\n        if (_referee == msg.sender) {\n            revert RefereeIsUserError(); \n        }\n        if (userSetReferee[msg.sender]) {\n            revert RefereeIsUserError(); \n        }\n        userReferee[msg.sender] = _referee;\n        userSetReferee[msg.sender] = true;\n    }\n\n    function verifyMessage(bytes32 _hashedMessage, uint8 _v, bytes32 _r, bytes32 _s, uint256 _taskNumber) public {\n        if (_taskNumber > taskCount) {\n            revert TaskNumberDoesNotExistError();\n        }\n        if (userTaskCompleted[msg.sender][_taskNumber]) {\n            revert UserAlreadyCompletedTaskError();\n        }\n        if (usedSignatures[_hashedMessage]) {\n            revert SignatureAlreadyUsedError();\n        }\n\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n        bytes32 prefixedHashMessage = keccak256(abi.encodePacked(prefix, _hashedMessage));\n        address recoveredSigner = ecrecover(prefixedHashMessage, _v, _r, _s);\n\n        if (i_owner == recoveredSigner) {\n            userTaskCompleted[msg.sender][_taskNumber] = true;\n\n            uint256 prize = taskToPrize[_taskNumber];\n            userPrizeBalance[msg.sender] += prize;\n\n            usedSignatures[_hashedMessage] = true;\n\n            address referee = userReferee[msg.sender];\n            if (referee != address(0)) {\n                uint256 refBonus = prize / 10;\n                uint256 userBonus = prize / 50; \n                userPrizeBalance[referee] += refBonus;\n                userPrizeBalance[msg.sender] += userBonus;\n            }\n        } else {\n            revert InvalidSignatureError();\n        }\n    }\n\n\n    function getUserBalance(address _user) public view returns(uint256) {\n        return userPrizeBalance[_user];\n    }\n\n    function getUserReferee(address _user) public view returns (address) {\n        return userReferee[_user];\n    }\n\n    function getUserCompletedTasks(address _user, uint256 _task) public view returns (bool) {\n        return userTaskCompleted[_user][_task];\n    }\n    \n    function getTaskToPrize(uint256 _task) public view returns (uint256) {\n        return taskToPrize[_task];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}